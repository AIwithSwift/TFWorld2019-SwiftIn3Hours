{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Complete - Swift and Python","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Swift","language":"swift","name":"swift"},"language_info":{"file_extension":".swift","mimetype":"text/x-swift","name":"swift","version":""}},"cells":[{"cell_type":"markdown","metadata":{"id":"axkiMfMdXoNv","colab_type":"text"},"source":["# Complete - Swift and Python"]},{"cell_type":"markdown","metadata":{"id":"E0JG1WqkYHps","colab_type":"text"},"source":["In this example, we're going to add some Python magic to the the multilayer peceptron XOR network that we made in the previous activity.\n"]},{"cell_type":"markdown","metadata":{"id":"ogFqL7EKYNZJ","colab_type":"text"},"source":["## Setting up"]},{"cell_type":"markdown","metadata":{"id":"cqP0u8hYYP7I","colab_type":"text"},"source":["First, we need to `import` the TensorFlow framework:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"kZRlD4utdPuX","colab":{}},"source":["import TensorFlow"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Tup2LjvzLz0D"},"source":["Next, we need to `import Python`, and hook it into the notebook environment:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"IFDhw6oILtTM","outputId":"7945301c-7bec-402c-f44c-9f95a113c94d","executionInfo":{"status":"ok","timestamp":1572304489018,"user_tz":240,"elapsed":11392,"user":{"displayName":"Paris B-A","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mATPYgh7Oradnt-89Tt0-SyerXDc8Z985jmLS2U=s64","userId":"01326454337734597812"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["import Python\n","%include \"EnableIPythonDisplay.swift\"\n","IPythonDisplay.shell.enable_matplotlib(\"inline\")"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('inline', 'module://ipykernel.pylab.backend_inline')\n"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"D_m1yBsQYXnp","colab_type":"text"},"source":["## Creating the model"]},{"cell_type":"markdown","metadata":{"id":"LGcGWpubYZFG","colab_type":"text"},"source":["As before, we'll create our model:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"z93l8JV5Khv5","colab":{}},"source":["// Create a XORModel Struct\n","struct XORModel: Layer\n","{\n","  // define three layers, each of Dense type\n","  var inputLayer = Dense<Float>(inputSize: 2, outputSize: 2, activation: sigmoid)\n","  var hiddenLayer = Dense<Float>(inputSize: 2, outputSize: 2, activation: sigmoid)\n","  var outputLayer = Dense<Float>(inputSize: 2, outputSize: 1, activation: sigmoid)\n","  \n","  // procide the differentiable thingo\n","  @differentiable func callAsFunction(_ input: Tensor<Float>) -> Tensor<Float>\n","  {\n","    return input.sequenced(through: inputLayer, hiddenLayer, outputLayer)\n","  }\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jiCDB-4pYeCb","colab_type":"text"},"source":["## Preparing to train the model"]},{"cell_type":"markdown","metadata":{"id":"d2O1YCf9YgwT","colab_type":"text"},"source":["Likewise, as before, we'll create an instance of the model, an optimiser, and some data."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"SSR6Mi0MKiWg","colab":{}},"source":["// create an instance of our XORModel Struct (defined above)\n","var model = XORModel()\n","\n","// create an optimizer (standard gradient descent)\n","let optimizer = SGD(for: model, learningRate: 0.02)\n","\n","// create some training data\n","let trainingData: Tensor<Float> = [[0, 0], [0, 1], [1, 0], [1, 1]]\n","\n","// label the training data (so we know the correct outputs)\n","let trainingLabels: Tensor<Float> = [[0], [1], [1], [0]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L5Rqvsj-Yl_W","colab_type":"text"},"source":["But we'll also create an array to store our loss in, so we can keep track of it:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"NSA-emMQe3fU","colab":{}},"source":["var losses: [Float] = []"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fYJAOc3NYqPy","colab_type":"text"},"source":["Then we'll train:"]},{"cell_type":"code","metadata":{"id":"2M2Jin-9YtQs","colab_type":"code","colab":{}},"source":["let epochs = 100_000"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"14HmPb1xKmG2","outputId":"97091c22-c71f-468e-905a-7eb89bb821db","colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["for epoch in 0 ..< epochs\n","{\n","    // do the ting\n","    let ùõÅmodel = model.gradient { model -> Tensor<Float> in\n","        let ≈∑ = model(trainingData)\n","        let loss = meanSquaredError(predicted: ≈∑, expected: trainingLabels)\n","        if epoch % 5000 == 0\n","        {\n","          print(\"epoch: \\(epoch) loss: \\(loss)\")\n","        }\n","        losses.append(loss.scalarized())\n","        return loss\n","    }\n","    optimizer.update(&model, along: ùõÅmodel)\n","}"],"execution_count":0,"outputs":[{"output_type":"stream","text":["epoch: 0 loss: 0.25536832\n","epoch: 5000 loss: 0.2501201\n","epoch: 10000 loss: 0.25008714\n","epoch: 15000 loss: 0.25006086\n","epoch: 20000 loss: 0.25003833\n","epoch: 25000 loss: 0.25001723\n","epoch: 30000 loss: 0.24999528\n","epoch: 35000 loss: 0.24997\n","epoch: 40000 loss: 0.24993798\n","epoch: 45000 loss: 0.24989387\n","epoch: 50000 loss: 0.24982883\n","epoch: 55000 loss: 0.24972737\n","epoch: 60000 loss: 0.24956138\n","epoch: 65000 loss: 0.24927837\n","epoch: 70000 loss: 0.24877715\n","epoch: 75000 loss: 0.2478496\n","epoch: 80000 loss: 0.24600479\n","epoch: 85000 loss: 0.24184218\n","epoch: 90000 loss: 0.23113453\n","epoch: 95000 loss: 0.20894165\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9PaQffxoYzpx","colab_type":"text"},"source":["## Visualising with Python"]},{"cell_type":"markdown","metadata":{"id":"inRy6KMEY2ea","colab_type":"text"},"source":["We're going to use the ever-useful [Matplotlib](https://matplotlib.org/) to visualise our losses. Matplotlib is a Python library, not a Swift library."]},{"cell_type":"markdown","metadata":{"id":"WPcFFt_kZJGA","colab_type":"text"},"source":["First, we need a handle on [`matplotlib.pyplot'](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot), which is the MATLAB style Python API that Matplotlib has, providing for simple programmatic plot"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"YMGdEacnfJqN","outputId":"ad6335f1-10c8-4400-ee10-dbb64b250922","scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":517}},"source":["let plot = Python.import(\"matplotlib.pyplot\")\n","plot.figure(figsize: [12, 8])\n","\n","plot.ylabel(\"Loss\")\n","plot.xlabel(\"epoch\")\n","plot.plot(losses)\n","\n","plot.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\ncA0AAABkCOEaAAAAyBDCNQAAAJAhhGsAAAAgQwjXAAAAQIYQrgEAAIAMIVwDAAAAGUK4BgAAADKE\ncA0AAABkCOEaAAAAyBDCNQAAAJAhhGsAAAAgQwjXAAAAQIYQrgEAAIAMIVwDAAAAGUK4BgAAADLE\n3D3qGjLCzPZI2hLRx4+TtDeiz8bY4TjnP45xYeA4FwaOc2GI6jhPdffG4VbkTbiOkpktc/e2qOtA\nuDjO+Y9jXBg4zoWB41wYsvE4MywEAAAAyBDCNQAAAJAhhOvMeDDqAjAmOM75j2NcGDjOhYHjXBiy\n7jgz5hoAAADIEK5cAwAAABlCuB4FM7vRzNab2UYzuyfqenB2ZtZiZr8ys7VmtsbM/kfQXm9mz5jZ\nhuBnXdBuZvbl4BivNrNL0/b1saD/BjP7WFr7ZWb2arDNl83Mxv43hZnFzWyFmT0RLE8zs5eC4/J9\nMysO2kuC5Y3B+ta0ffxt0L7ezN6d1s65nwXMrNbMHjOz181snZldxbmcf8zsL4P/Xr9mZt8zs1LO\n59xnZl83s91m9lpaW+jn7+k+I6Pcnek8JklxSW9Kmi6pWNIqSXOirovprMdtkqRLg/kqSW9ImiPp\ni5LuCdrvkfSFYP49kp6SZJKulPRS0F4vaVPwsy6YrwvWvRz0tWDbm6L+vQtxknS3pO9KeiJYfkTS\nrcH8f0j678H8pyX9RzB/q6TvB/NzgvO6RNK04HyPc+5nzyTpm5L+JJgvllTLuZxfk6QmSZsllQXL\nj0j6OOdz7k+SrpN0qaTX0tpCP39P9xmZnLhyff4WSdro7pvcvUfSw5JuibgmnIW773D3V4L5I5LW\nKfUf71uU+h+1gp/vDeZvkfSQpyyRVGtmkyS9W9Iz7r7f3Q9IekbSjcG6andf4qkz96G0fWGMmFmz\npN+X9NVg2SS9Q9JjQZehx3jg2D8m6Z1B/1skPezu3e6+WdJGpc57zv0sYGY1Sv3P+WuS5O497n5Q\nnMv5KCGpzMwSksol7RDnc85z999I2j+keSzO39N9RsYQrs9fk6T2tOWOoA05Ivhz4UJJL0ma4O47\nglU7JU0I5k93nM/U3jFMO8bWlyT9jaRksNwg6aC79wXL6cflxLEM1h8K+p/rscfYmiZpj6RvBMN/\nvmpmFeJczivuvk3SP0raqlSoPiRpuTif89VYnL+n+4yMIVyjIJlZpaQfSPqsux9OXxd8y+UxOjnK\nzP5A0m53Xx51LQhVQqk/Kf+7uy+UdFSpP/GewLmc+4LxsLco9WVqsqQKSTdGWhTGxFicv2F9BuH6\n/G2T1JK23By0IcuZWZFSwfo77v7DoHlX8GckBT93B+2nO85nam8eph1j5xpJN5vZW0r9ifcdkv5F\nqT8jJoI+6cflxLEM1tdI2qdzP/YYWx2SOtz9pWD5MaXCNudyflksabO773H3Xkk/VOoc53zOT2Nx\n/p7uMzKGcH3+lkqaFdyxXKzUjROPR1wTziIYe/c1Sevc/Z/SVj0uaeAu449J+kla+0eDO5WvlHQo\n+HPS05LeZWZ1wZWVd0l6Olh32MyuDD7ro2n7whhw979192Z3b1XqvPylu39E0q8kfSDoNvQYDxz7\nDwT9PWi/NXj6wDRJs5S6QYZzPwu4+05J7WZ2QdD0Tklrxbmcb7ZKutLMyoPjMHCcOZ/z01icv6f7\njMzJ9B2ShTQpdffqG0rdaXxv1PUwjeiYvU2pPwGtlrQymN6j1Ji8ZyVtkPQLSfVBf5P0leAYvyqp\nLW1fn1TqppiNkj6R1t4m6bVgm39V8LImpkiO9w06+bSQ6Ur9z3SjpEcllQTtpcHyxmD99LTt7w2O\n43qlPSmCcz87JkkLJC0LzucfK/W0AM7lPJsk/S9JrwfH4ltKPfGD8znHJ0nfU2ocfa9Sf4m6YyzO\n39N9RiYn3tAIAAAAZAjDQgAAAIAMIVwDAAAAGUK4BgAAADKEcA0AAABkCOEaAAAAyBDCNQDgjMzs\nBjN7Iuo6ACAXEK4BAACADCFcA0CeMLPbzexlM1tpZg+YWdzMOs3sn81sjZk9a2aNQd8FZrbEzFab\n2Y+Ct5vJzGaa2S/MbJWZvWJmM4LdV5rZY2b2upl9J3jrGQBgCMI1AOQBM7tI0ockXePuCyT1S/qI\npApJy9z9YknPSfq7YJOHJP2f7j5PqTeeDbR/R9JX3H2+pKuVeoOaJC2U9FlJc5R6O941of9SAJCD\nElEXAADIiHdKukzS0uCicpmk3ZKSkr4f9Pm2pB+aWY2kWnd/Lmj/pqRHzaxKUpO7/0iS3P24JAX7\ne9ndO4LllZJaJT0f/q8FALmFcA0A+cEkfdPd/3ZQo9n/NaSfn+f+u9Pm+8X/PwBgWAwLAYD88Kyk\nD5jZeEkys3ozm6rUf+c/EPT5sKTn3f2QpANmdm3Q/seSnnP3I5I6zOy9wT5KzKx8TH8LAMhxXHkA\ngDzg7mvN7H9K+rmZxST1SvpzSUclLQrW7VZqXLYkfUzSfwTheZOkTwTtfyzpATO7L9jHH43hrwEA\nOc/cz/cvhACAbGdmne5eGXUdAFAoGBYCAAAAZAhXrgEAAIAM4co1AAAAkCGEawAAACBDCNcAAABA\nhhCuAQAAgAwhXAMAAAAZQrgGAAAAMuT/By22mHYk+FvpAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["None\n"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"YkNFr_D2Kn-f","outputId":"dbe90c10-22b8-4e96-b674-49b67b8392be","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(round(model.inferring(from: [[0, 0], [0, 1], [1, 0], [1, 1]])))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[0.0],\r\n"," [1.0],\r\n"," [1.0],\r\n"," [1.0]]\r\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"R3OcEtkgfA98","colab_type":"text"},"source":["## Python Interopability in Depth\n","\n","This section is an up-to-date derivative of some of the TensorFlow documentation."]},{"cell_type":"markdown","metadata":{"id":"DVnib3G0fEDG","colab_type":"text"},"source":["You can ask for the Python version:"]},{"cell_type":"code","metadata":{"id":"cNcL-sEMfF1e","colab_type":"code","colab":{}},"source":["print(Python.version)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eM4GJnWDfKJX","colab_type":"text"},"source":["You can also _set_ a specific Python version, if you need. \n","\n","Note: you should run `PythonLibrary`.useVersion right after import Python, before calling any Python code. It cannot be used to dynamically switch Python versions. The Swift class [`PythonLibrary`](https://www.tensorflow.org/swift/api_docs/Structs/PythonLibrary) represents... a Python library!"]},{"cell_type":"code","metadata":{"id":"7y-EZBzhfRzi","colab_type":"code","colab":{}},"source":["// PythonLibrary.useVersion(2)\n","// PythonLibrary.useVersion(3, 7)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UasavsMfft0k","colab_type":"text"},"source":["Using Swift, you can represent an object from Python using the Swift class [`PythonObject`](https://www.tensorflow.org/swift/api_docs/Structs/PythonObject). Everything Python will return a Swift `PythonObject`."]},{"cell_type":"markdown","metadata":{"id":"0YxX4onBhy8J","colab_type":"text"},"source":["All of Swift's basic types can be converted to a `PythonObject`. Some happen implicitly, and some need to be cast from a Swift value to a `PythonObject` using a `PythonObject` initialiser:\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"uGJcsblhfqNm","colab_type":"code","colab":{}},"source":["let pythonInt: PythonObject = 1\n","let pythonFloat: PythonObject = 3.0\n","let pythonString: PythonObject = \"Hello Python!\"\n","let pythonRange: PythonObject = PythonObject(5..<10)\n","let pythonArray: PythonObject = [1, 2, 3, 4]\n","let pythonDict: PythonObject = [\"foo\": [0], \"bar\": [1, 2, 3]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Au-ypfRViBHN","colab_type":"text"},"source":["To make it easier to use in Swift, `PythonObject` defines most standard operations, including numeric operations, indexing, and iteration:"]},{"cell_type":"code","metadata":{"id":"GW3zEmfiiE1O","colab_type":"code","colab":{}},"source":["print(pythonInt + pythonFloat)\n","print(pythonString[0..<6])\n","print(pythonRange)\n","print(pythonArray[2])\n","print(pythonDict[\"bar\"])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2hnyr2Oxigqn","colab_type":"text"},"source":["You can also convert a `PythonObject` back to Swift types:"]},{"cell_type":"code","metadata":{"id":"h1QodWq8ieVK","colab_type":"code","colab":{}},"source":["let int = Int(pythonInt)!\n","let float = Float(pythonFloat)!\n","let string = String(pythonString)!\n","let range = Range<Int>(pythonRange)!\n","let array: [Int] = Array(pythonArray)!\n","let dict: [String: [Int]] = Dictionary(pythonDict)!"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XEzzGpTRipuL","colab_type":"text"},"source":["And you can, of course, perform all the operations that you'd expect. The outputs are, also of course, the same as from Python:"]},{"cell_type":"code","metadata":{"id":"prw2ZxEzioEc","colab_type":"code","colab":{}},"source":["print(Float(int) + float)\n","print(string.prefix(6))\n","print(range)\n","print(array[2])\n","print(dict[\"bar\"]!)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pLhpxWaspuYV","colab_type":"text"},"source":["You need to be careful when you're using Python and Swift together, as the compiler can't figure out things about Python objects. For example, if you have a `PythonObject` that holds a Python String:"]},{"cell_type":"code","metadata":{"id":"ErpQKgYOpURL","colab_type":"code","outputId":"be7850d8-2eb0-4e90-a75d-6fd4956f02bf","executionInfo":{"status":"ok","timestamp":1572304498530,"user_tz":240,"elapsed":282,"user":{"displayName":"Paris B-A","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mATPYgh7Oradnt-89Tt0-SyerXDc8Z985jmLS2U=s64","userId":"01326454337734597812"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["var myPythonString: PythonObject = \"I am a Python String!\"\n","print(myPythonString)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["I am a Python String!\r\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JoUjQ6rgp27q","colab_type":"text"},"source":["And then, for example, try and add 5 to it. The compiler won't complain, but it will crash (which could be 10 hours into a complex training run) on runtime:"]},{"cell_type":"code","metadata":{"id":"Mwp7xKbCpdG9","colab_type":"code","colab":{}},"source":["// myPythonString = myPythonString + 5 // this will crash on runtime, but compile just fine\n","print(myPythonString)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ldIYoNcEi0oy","colab_type":"text"},"source":["`PythonObject` defines conformances to many useful, standard Swift protocols: \n","\n","* [Equatable](https://developer.apple.com/documentation/swift/equatable) \n","* [Comparable](https://developer.apple.com/documentation/swift/comparable) \n","* [Hashable](https://developer.apple.com/documentation/swift/hashable) \n","* [SignedNumeric](https://developer.apple.com/documentation/swift/numeric) \n","* [Strideable](https://developer.apple.com/documentation/swift/strideable) \n","* [MutableCollection](https://developer.apple.com/documentation/swift/mutablecollection) \n","* The [ExpressibleBy_Literal](https://developer.apple.com/documentation/swift/swift_standard_library/initialization_with_literals) protocols\n","\n","You can learn more about this in [the documentation](https://www.tensorflow.org/swift/api_docs/Structs/PythonObject). None of the conformances type-safe, and crashes will occur if you attempt to use protocol functionality from an incompatible PythonObject instance."]},{"cell_type":"code","metadata":{"id":"PvcQUC2QmCGd","colab_type":"code","colab":{}},"source":["let one: PythonObject = 1\n","print(one == one)\n","print(one < one)\n","print(one + one)\n","\n","let array: PythonObject = [1, 2, 3]\n","for (i, x) in array.enumerated() {\n","    print(i, x)\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QodBVesnmVUx","colab_type":"text"},"source":["When you convert a tuple from Python to Swift, you have to statically know the arity of the tuple and call one of the instance methods `PythonObject.tuple2`, `PythonObject.tuple3`, or `PythonObject.tuple4`."]},{"cell_type":"code","metadata":{"id":"lgdRKuL8mU5F","colab_type":"code","colab":{}},"source":["let pythonTuple = Python.tuple([1, 2, 3])\n","print(pythonTuple, Python.len(pythonTuple))\n","\n","// Convert to Swift.\n","let tuple = pythonTuple.tuple3\n","print(tuple)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5hv0cCDamvxp","colab_type":"text"},"source":["You an also use `Python.builtins` to access all the Python builtins:"]},{"cell_type":"code","metadata":{"id":"zJi3Oei3mvEX","colab_type":"code","colab":{}},"source":["_ = Python.builtins\n","\n","print(Python.type(1))\n","print(Python.len([1, 2, 3]))\n","print(Python.sum([1, 2, 3]))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ocn5edp4nAHt","colab_type":"text"},"source":["And, as we showed above with Matplotlib, you can access and import Python modules:"]},{"cell_type":"code","metadata":{"id":"WIMppNRLm_sY","colab_type":"code","colab":{}},"source":["let np = Python.import(\"numpy\")\n","print(np)\n","let zeros = np.ones([2, 3])\n","print(zeros)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bJ54f2OVnJb9","colab_type":"text"},"source":["There's even support for checking that the Python import is safe:"]},{"cell_type":"code","metadata":{"id":"E8_L9UxOnHmW","colab_type":"code","colab":{}},"source":["let maybeModule = try? Python.attemptImport(\"nonexistent_module\")\n","print(maybeModule)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IwoDsURVnOcq","colab_type":"text"},"source":["There's also explicit support for converting the Swift types `Array<Element>`, `ShapedArray<Scalar>`, and  `Tensor<Scalar>` to and from Python's `numpy.ndarray`.\n","\n","Note that the conversion will only succeed if the `dtype` of the `numpy.ndarray` is compatible with the `Element` or `Scalar` generic parameter type.\n","\n","For `Array`, conversion from numpy succeeds only if the `numpy.ndarray` is one dimension (1-D)."]},{"cell_type":"code","metadata":{"id":"5zCkIAASnnHF","colab_type":"code","colab":{}},"source":["let numpyArray = np.ones([4], dtype: np.float32)\n","print(\"Swift type:\", type(of: numpyArray))\n","print(\"Python type:\", Python.type(numpyArray))\n","print(numpyArray.shape)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QLHtvs3wnwBz","colab_type":"text"},"source":["Examples of converting `numpy.ndarray` to Swift types:"]},{"cell_type":"code","metadata":{"id":"2PGYgVRwnvrI","colab_type":"code","colab":{}},"source":["let array: [Float] = Array(numpy: numpyArray)!\n","let shapedArray = ShapedArray<Float>(numpy: numpyArray)!\n","let tensor = Tensor<Float>(numpy: numpyArray)!"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nWJjJMvWn-LD","colab_type":"text"},"source":["Examples of converting Swift types to `numpy.ndarray`:"]},{"cell_type":"code","metadata":{"id":"SuHZzrV4nqTd","colab_type":"code","colab":{}},"source":["print(array.makeNumpyArray())\n","print(shapedArray.makeNumpyArray())\n","print(tensor.makeNumpyArray())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"umKxn053n1Ri","colab_type":"text"},"source":["Examples with different `dtype`:"]},{"cell_type":"code","metadata":{"id":"x0wCrXHInznj","colab_type":"code","colab":{}},"source":["let doubleArray: [Double] = Array(numpy: np.ones([3], dtype: np.float))!\n","let intTensor = Tensor<Int32>(numpy: np.ones([2, 3], dtype: np.int32))!"],"execution_count":0,"outputs":[]}]}