== Swift for TensorFlow

This running sheet accompanies the session https://conferences.oreilly.com/tensorflow/tf-ca/public/schedule/detail/78523[Swift for TensorFlow in 3 hours] at TensorFlow World 2019.

It's presented by:

* Paris Buttfield-Addison (@parisba)
* Tim Nugent (@the_mcjones)
* Mars Geldard (@themartianlife)

// ML programmers who want to learn new skills, deep learning engineers, Python programmers seeking to diversify, users of TensorFlow wanting to learn Swift for TensorFlow, and anyone who wants to get into deep learning or Swift

// Mars Geldard, Tim Nugent, and Paris Buttfield-Addison say you’re wrong if you think Swift is just for app developers. Swift for TensorFlow provides the power of TensorFlow with all the advantages of Python (and complete access to Python libraries, as needed) and Swift—the safe, fast, incredibly capable open source programming language.
// You’ll leave with the knowledge to use Swift, a programming language that’s great for everything from numeric computing to application development, and Swift for TensorFlow, the official TensorFlow project that brings new tooling, systems design, compilers, and features to the machine learning world, by way of Swift.
// Outline
// Topics covered
// The basics of Swift and how to get started using a Jupyter notebook (yes, they fully support Swift)
// Why Swift is a great language for scientific computing and deep learning
// How Swift can match the performance of manually tuned assembly code in numerical computing
// How Swift for TensorFlow works, what it’s capable of, and where it’s headed (learn the power of differential operators and being able to ask your types for their gradient)
// Why Swift for TensorFlow is not just a port of TensorFlow to a different language (embrace differentiable programming)
// How you can use all your favorite Python libraries, including NumPy, pickle, and beyond, easily and directly from Swift
// Specifically, you’ll

// They point to resources to build on during your journey through Swift, Swift for TensorFlow, and the future of deep learning, differentiable programming, and the future of programming languages.
// Swift is a powerful, well supported, open, and now mature programming language. Swift for TensorFlow is brand new, solidly backed, and maturing rapidly. You can’t do everything with Swift for TensorFlow yet, but you can learn a lot and improve your thinking on how and why certain tool sets work. Learn the bleeding edge before it arrives, and pick up valuable Swift skills along the way.
// This is a three-hour exploration of everything you need to know to work with Swift, Swift for TensorFlow, and beyond.


==== Table of Contents

* Getting Setup
* Part 1: Swift fundamentals (60 minutes)
* Part 2:
* Part 3:
* Part 4:

=== Getting Setup

There are two ways for you to work through this material:

1. *Use Google's Colaboratory* —— Colaboratory ("Colab") is an online instance of a Google-modified version of Jupyter Notebooks, and supports Swift and Swift for TensorFlow in an experimental form. This requires a solid internet connection and a Google account.

2. *Use Docker, Jupyter, and a Swift kernel for Jupyter* —— if you have time, and administrative rights on your machine, this means you can do everything offline, locally on your machine.

==== Google Colaboratory

TODO

==== Docker, Jupyter, and Swift

. Run the following command on your terminal:
+
`docker run --publish 8888:8888 --cap-add SYS_PTRACE --volume /my/host/notebooks:/notebooks swift-jupyter`

This might look slightly mysterious if you're not used to Docker, but it's not that bad once you unpack it:

* `run` tells Docker to run the container (named at the end, `swift-jupyter`)
* the `-publish` option maps the actual local machine's port 8888 to the container port 8888
* the `--cap-add` option tells Docker that we'd like specific http://man7.org/linux/man-pages/man7/capabilities.7.html[Linux capabilities] added (in this case `SYS_PTRACE`)
* the `--volume` option tells Docker that we want to map the path `/my/host/notebooks` on the actual local machine to the path `/notebooks` in Jupyter.



=== Part 1: Swift Fundamentals

// Begin with a Swift programming tutorial covering how to use Swift as a programming language (Mars, Tim, and Paris use both Apple’s playgrounds, if you have a macOS device, as well as Jupyter notebooks)

We're going to spend almost half our time in this tutorial on Swift as a programming language. This is because you cannot really appreciate Swift for TensorFlow without appreciating Swift. Many of the strengths of Swift for TensorFlow are instrinsically linked to the Swift programming language. 

In the _"Who is this presentation for?"_ section of the presentation descripton on the event website we said:

[quote]
____
ML programmers who want to learn new skills, deep learning engineers, Python programmers seeking to diversify, users of TensorFlow wanting to learn Swift for TensorFlow, and anyone who wants to get into deep learning or Swift.
____

All of these cases imply that you don't know Swift yet. Therefore: we're going to teach you Swift.

First, some programming language basics:

. Open a new Swift notebook, and add the following code:
+
[source,swift]
----
print("Hello, TensorFlow World!")
----
. Let's improve things, using variables! Add:
+
[source,swift]
----
var theMessage = "Hello, TensorFlowWorld!"
print(theMessage)
----
. Because we used a `var`, we can redefine it later:
+
[source,swift]
----
theMessage = "It's almost Halloween!"
print(theMessage)
----
. We could also have used `let` to define a constant:
+
[source,swift]
----
let permanentMessage = "This message will never change!!"
print(permanentMessage)
----
. That means we can't change it, and this code will error:
+
[source,swift]
----
permanentMessage = "Haha!" 
----

// variables
// strings
// string interpolation
// converting types
// control flow
// collection types
// functions
// closures
// objects
// classes
// initialisers
// protocols
// error handling
// generics

=== Part 2: Swift for TensorFlow and Common Use Cases

TODO

// Move to a Swift for TensorFlow tutorial exploring fundamental machine learning problem solving using TensorFlow and Swift
// Explore and demonstrate common use cases for TensorFlow using Swift


=== Part 3: Python and Swift (for TensorFlow)

// Demonstrate the use of NumPy, the ubiquitous Python library from Swift, to perform common and useful data science operations and integrate the results with Swift for TensorFlow


. Before we can use Python in Swift, we need to `import` Python:
+
[source,swift]
----
import Python
print(Python.version)
----
+ 
This will print out the version of Python that Swift can access on your system.

=== Part 4: Big Example (title TBD)

TODO

// Bring all the components together: Swift programming (in a notebook), showcasing common ML problem-solving processes using Swift for TensorFlow, and integrating Python libraries as needed in a pragmatic manner